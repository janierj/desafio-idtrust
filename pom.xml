<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.desafio</groupId>
	<artifactId>idtrust</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>idtrust</name>
	<description>Skill Test</description>

	<properties>
		<java.version>11</java.version>
		<spring-boot.version>2.4.1</spring-boot.version>
		<liquibase.version>3.9.0</liquibase.version>
		<liquibase-hibernate5.version>3.8</liquibase-hibernate5.version>
		<validation-api.version>2.0.1.Final</validation-api.version>
		<jib-maven-plugin.version>2.2.0</jib-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.6</jacoco-maven-plugin.version>
		<springdoc-openapi-version>1.5.2</springdoc-openapi-version>
		<project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
		<jacoco.utReportFolder>${project.build.directory}/jacoco/test</jacoco.utReportFolder>
		<jacoco.utReportFile>${jacoco.utReportFolder}/test.exec</jacoco.utReportFile>
		<jacoco.itReportFolder>${project.build.directory}/jacoco/integrationTest</jacoco.itReportFolder>
		<jacoco.itReportFile>${jacoco.itReportFolder}/integrationTest.exec</jacoco.itReportFile>
		<junit.utReportFolder>${project.testresult.directory}/test</junit.utReportFolder>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
		</dependency>
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>${springdoc-openapi-version}</version>
		</dependency>

	</dependencies>

	<build>
		<defaultGoal>spring-boot:run</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.liquibase</groupId>
				<artifactId>liquibase-maven-plugin</artifactId>
				<version>${liquibase.version}</version>
				<configuration>
					<changeLogFile>${project.basedir}/src/main/resources/db/liquibase-changelog.xml</changeLogFile>
					<diffChangeLogFile>${project.basedir}/src/main/resources/db/changelog/${maven.build.timestamp}_changelog.xml</diffChangeLogFile>
					<driver>org.postgresql.Driver</driver>
					<url>jdbc:postgresql://localhost:5432/desafio_idtrust</url>
					<username>postgres</username>
					<password>root</password>
					<referenceUrl>hibernate:spring:br.desafio.idtrust.entity?dialect=org.hibernate.dialect.PostgreSQL10Dialect&amp;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</referenceUrl>
					<verbose>true</verbose>
					<logging>debug</logging>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-data-jpa</artifactId>
						<version>${spring-boot.version}</version>
					</dependency>
					<dependency>
						<groupId>org.liquibase</groupId>
						<artifactId>liquibase-core</artifactId>
						<version>${liquibase.version}</version>
					</dependency>
					<dependency>
						<groupId>org.liquibase.ext</groupId>
						<artifactId>liquibase-hibernate5</artifactId>
						<version>${liquibase-hibernate5.version}</version>
					</dependency>
					<dependency>
						<groupId>javax.validation</groupId>
						<artifactId>validation-api</artifactId>
						<version>${validation-api.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>${jib-maven-plugin.version}</version>
				<configuration>
					<to>
						<image>registry.hub.docker.com/janierj/desafio-idtrust</image>
						<auth>
							<username></username>
							<password></password>
						</auth>
					</to>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>pre-unit-tests</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
							<configuration>
								<!-- Sets the path to the file which contains the execution data. -->
								<destFile>${jacoco.utReportFile}</destFile>
							</configuration>
						</execution>
						<!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
						<execution>
							<id>post-unit-test</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
							<configuration>
								<dataFile>${jacoco.utReportFile}</dataFile>
								<outputDirectory>${jacoco.utReportFolder}</outputDirectory>
							</configuration>
						</execution>
						<execution>
							<id>pre-integration-tests</id>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
							<configuration>
								<!-- Sets the path to the file which contains the execution data. -->
								<destFile>${jacoco.itReportFile}</destFile>
							</configuration>
						</execution>
						<!-- Ensures that the code coverage report for integration tests is created after integration tests have been run -->
						<execution>
							<id>post-integration-tests</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>report-integration</goal>
							</goals>
							<configuration>
								<dataFile>${jacoco.itReportFile}</dataFile>
								<outputDirectory>${jacoco.itReportFolder}</outputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<reportsDirectory>${junit.utReportFolder}</reportsDirectory>
						<excludes>
							<exclude>**/*IT*</exclude>
							<exclude>**/*IntTest*</exclude>
						</excludes>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>
